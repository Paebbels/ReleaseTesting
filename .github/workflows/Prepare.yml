name: Prepare Variables

on:
  workflow_call:
    inputs:
      ubuntu_image:
        description: 'Name of the Ubuntu image.'
        required: false
        default: 'ubuntu-24.04'
        type: string
      main_branch:
        description: 'Name of the branch containing releases.'
        required: false
        default: 'main'
        type: string
      development_branch:
        description: 'Name of the development branch containing features.'
        required: false
        default: 'dev'
        type: string
      release_branch:
        description: 'Name of the branch containing releases.'
        required: false
        default: 'main'
        type: string
      tag_pattern:
        description: 'Name of the branch containing releases.'
        required: false
        default: '(v|r)?[0-9]+(\.[0-9]+){0,2}(-(dev|alpha|beta|rc)([0-9]*))?'
        type: string

    outputs:
      on_main_branch:
        description: ""
        value: ${{ jobs.Prepare.outputs.on_main_branch }}
      on_dev_branch:
        description: ""
        value: ${{ jobs.Prepare.outputs.on_dev_branch }}
      on_release_branch:
        description: ""
        value: ${{ jobs.Prepare.outputs.on_release_branch }}
      is_regular_commit:
        description: ""
        value: ${{ jobs.Prepare.outputs.is_regular_commit }}
      is_merge_commit:
        description: ""
        value: ${{ jobs.Prepare.outputs.is_merge_commit }}
      is_release_commit:
        description: ""
        value: ${{ jobs.Prepare.outputs.is_release_commit }}
      ref_kind:
        description: ""
        value: ${{ jobs.Prepare.outputs.ref_kind }}
      branch:
        description: ""
        value: ${{ jobs.Prepare.outputs.branch }}
      tag:
        description: ""
        value: ${{ jobs.Prepare.outputs.tag }}
      version:
        description: ""
        value: ${{ jobs.Prepare.outputs.version }}
#      pr_title:
#        description: ""
#        value: ${{ jobs.Prepare.outputs.pr_title }}
#      pr_number:
#        description: ""
#        value: ${{ jobs.Prepare.outputs.pr_number }}
#      pr_mergedby:
#        description: ""
#        value: ${{ jobs.Prepare.outputs.pr_mergedby }}
#      pr_mergedat:
#        description: ""
#        value: ${{ jobs.Prepare.outputs.pr_mergedat }}

jobs:
  Prepare:
    name: Extract Information
    runs-on: ubuntu-24.04
    outputs:
      on_main_branch:    ${{ steps.Classify.outputs.on_main_branch }}
      on_dev_branch:     ${{ steps.Classify.outputs.on_dev_branch }}
      on_release_branch: ${{ steps.Classify.outputs.on_release_branch }}
      is_regular_commit: ${{ steps.Classify.outputs.is_regular_commit }}
      is_merge_commit:   ${{ steps.Classify.outputs.is_merge_commit }}
      is_release_commit: ${{ steps.Classify.outputs.is_release_commit }}
      ref_kind:          ${{ steps.Classify.outputs.ref_kind }}
      branch:            ${{ steps.Classify.outputs.branch }}
      tag:               ${{ steps.Classify.outputs.tag }}
      version:           ${{ steps.Classify.outputs.version }}

    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v4
        with:
          # The command 'git describe' (used for version) needs the history.
          fetch-depth: 0

      - name: üñâ GitHub context information
        run: |
          printf "%s\n" "github.event_name: ${{ github.event_name }}"
          printf "%s\n" "github.actor:      ${{ github.actor }}"
          printf "%s\n" "github.ref:        ${{ github.ref }}"
          printf "%s\n" "github.base_ref:   ${{ github.base_ref }}"
          printf "%s\n" "github.head_ref:   ${{ github.head_ref }}"
          printf "%s\n" "github.sha:        ${{ github.sha }}"

      - name: üñâ Classify commit
        id: Classify
        run: |
          set +e

          ANSI_LIGHT_RED=$'\x1b[91m'
          ANSI_LIGHT_GREEN=$'\x1b[92m'
          ANSI_LIGHT_YELLOW=$'\x1b[93m'
          ANSI_LIGHT_BLUE=$'\x1b[94m'
          ANSI_NOCOLOR=$'\x1b[0m'
          
          ref="${{ github.ref }}"
          on_main_branch="false"
          on_dev_branch="false"
          on_release_branch="false"
          is_regular_commit="false"
          is_merge_commit="false"
          is_release_commit="false"
          ref_kind="unknown"
          branch=""
          tag=""
          version=""
          
          printf "%s" "commit check: "
          if [[ "${ref:0:11}" == "refs/heads/" ]]; then
            ref_kind="branch"
            branch="${ref:11}"
          
            if [[ "${branch}" == "${{ inputs.main_branch }}" ]]; then
              on_main_branch="true"
          
              if [[ -z "$(git rev-list -1 --merges ${{ github.sha }}~1..${{ github.sha }})" ]]; then
                is_regular_commit="true"
                printf "${ANSI_LIGHT_YELLOW}regular "
              else
                is_merge_commit="true"
                printf "${ANSI_LIGHT_GREEN}merge "
              fi
              printf "commit${ANSI_NOCOLOR} on main branch ${ANSI_LIGHT_BLUE}'%s'${ANSI_NOCOLOR}\n" "${{ inputs.main_branch }}"
            fi
          
            if [[ "${branch}" == "${{ inputs.development_branch }}" ]]; then
              on_dev_branch="true"
          
              if [[ -z "$(git rev-list -1 --merges ${{ github.sha }}~1..${{ github.sha }})" ]]; then
                is_regular_commit="true"
                printf "${ANSI_LIGHT_YELLOW}regular "
              else
                is_merge_commit="true"
                printf "${ANSI_LIGHT_GREEN}merge "
              fi
              printf "commit${ANSI_NOCOLOR} on development branch ${ANSI_LIGHT_BLUE}'%s'${ANSI_NOCOLOR}\n" "${{ inputs.development_branch }}"
            fi
          
            if [[ "${branch}" == "${{ inputs.release_branch }}" ]]; then
              on_release_branch="true"
            
              if [[ -z "$(git rev-list -1 --merges ${{ github.sha }}~1..${{ github.sha }})" ]]; then
                is_regular_commit="true"
                printf "${ANSI_LIGHT_YELLOW}regular "
              else
                is_release_commit="true"
                printf "${ANSI_LIGHT_GREEN}release "
              fi
              printf "commit${ANSI_NOCOLOR} on release branch ${ANSI_LIGHT_BLUE}'%s'${ANSI_NOCOLOR}\n" "${{ inputs.release_branch }}"
            fi
          elif [[ "${ref:0:10}" == "refs/tags/" ]]; then
            ref_kind="tag"
            tag="${ref:10}"
          
            TAG_PATTERN='^${{ inputs.tag_pattern }}$'
            printf "Check tag name against regexp '%s' ... " "${TAG_PATTERN}"
            if [[ "${tag}" =~ $TAG_PATTERN ]]; then
              printf "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}\n"
              version="${tag}"
            else
              printf "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}\n"
              printf "${ANSI_LIGHT_RED}Tag name '%s' doesn't conform to regexp '%s'.${ANSI_NOCOLOR}\n" "${tag}" "${TAG_PATTERN}"
              printf "::error title=RexExpCheck::Tag name '%s' doesn't conform to regexp '%s'.\n" "${tag}" "${TAG_PATTERN}"
              exit 1
            fi
          
            git branch --remotes --contains $(git rev-parse --verify "tags/${tag}~0") | grep "origin/${{ inputs.release_branch }}"
            printf "retCode: $?\n"
            git branch --remotes --contains $(git rev-parse --verify "tags/${tag}~0") | grep "origin/${{ inputs.development_branch }}"
            printf "retCode: $?\n"
          
          else
            printf "::error title=Classify Commit::Unknown Git reference '%s'.\n" "${{ github.ref }}"
            exit 1
          fi
          
          tee --append "${GITHUB_OUTPUT}" <<EOF
          on_main_branch=${on_main_branch}
          on_dev_branch=${on_dev_branch}
          on_release_branch=${on_release_branch}
          is_regular_commit=${is_regular_commit}
          is_merge_commit=${is_merge_commit}
          is_release_commit=${is_release_commit}
          ref_kind=${ref_kind}
          branch=${branch}
          tag=${tag}
          version=${version}
          EOF

      - name: Debug
        run: |
          printf "on_main_branch:    %s\n" "${{ steps.Classify.outputs.on_main_branch }}"
          printf "on_dev_branch:     %s\n" "${{ steps.Classify.outputs.on_dev_branch }}"
          printf "on_release_branch: %s\n" "${{ steps.Classify.outputs.on_release_branch }}"
          printf "is_regular_commit: %s\n" "${{ steps.Classify.outputs.is_regular_commit }}"
          printf "is_merge_commit:   %s\n" "${{ steps.Classify.outputs.is_merge_commit }}"
          printf "is_release_commit: %s\n" "${{ steps.Classify.outputs.is_release_commit }}"
          printf "ref_kind:          %s\n" "${{ steps.Classify.outputs.ref_kind }}"
          printf "branch:            %s\n" "${{ steps.Classify.outputs.branch }}"
          printf "tag:               %s\n" "${{ steps.Classify.outputs.tag }}"
          printf "version:           %s\n" "${{ steps.Classify.outputs.version }}"
