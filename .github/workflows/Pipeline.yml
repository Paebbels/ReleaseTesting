name: Pipeline

on:
  push:
  create:
  workflow_dispatch:

jobs:
  Build:
    name: Build something
    runs-on: ubuntu-24.04

    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v4
        with:
          # The command 'git describe' (used for version) needs the history.
          fetch-depth: 0

      - name: 🖉 Info
        run: |
          printf "%s\n" "github.event_name: ${{ github.event_name }}"
          printf "%s\n" "github.actor:      ${{ github.actor }}"
          printf "%s\n" "github.ref:        ${{ github.ref }}"
          printf "%s\n" "github.base_ref:   ${{ github.base_ref }}"
          printf "%s\n" "github.head_ref:   ${{ github.head_ref }}"
          printf "%s\n" "github.sha:        ${{ github.sha }}"
          if [[ -z "$(git rev-list -1 --merges ${{ github.sha }}~1..${{ github.sha }})" ]]; then
            printf "%s\n" "gitismerge:        normal commit"
          else
            printf "%s\n" "gitismerge:        merge commit"
          fi

      - name: 🖉 Build 1
        run: |
          printf "%s\n" "Document 1 $(date --utc '+%d.%m.%Y - %H:%M:%S')"   > document1.txt
          printf "%s\n" "Analysis log $(date --utc '+%d.%m.%Y - %H:%M:%S')" > analysis.log
          printf "%s\n" "Build log $(date --utc '+%d.%m.%Y - %H:%M:%S')"    > build.log

      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: document
          path: |
            document1.txt
            *.log
          if-no-files-found: error
          retention-days: 1

      - name: 🖉 Program
        run: |
          printf "%s\n" "Document other $(date --utc '+%d.%m.%Y - %H:%M:%S')" > document1.txt
          printf "%s\n" "Program $(date --utc '+%d.%m.%Y - %H:%M:%S')"        > program.py
          
      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: other
          path: |
            *.txt
            *.py
          if-no-files-found: error
          retention-days: 1

  Nightly:
    uses: ./.github/workflows/Nightly.yml
    needs:
      - Build
    secrets: inherit
    permissions:
      contents: write
      actions: write
#      attestations: write
    with:
      prerelease: true
      nightly_title: "Nächtliches Release"
      nightly_description: |
        This *nightly* release contains all latest and important artifacts created by GHDL's CI pipeline.

        # GHDL 5.0.0-dev

        GHDL offers the simulator and synthesis tool for VHDL. GHDL can be build for various backends:
        * `gcc` - using the GCC compiler framework
        * `mcode` - in memory code generation
        * `llvm` - using the LLVM compiler framework
        * `llvm-jit` - using the LLVM compiler framework, but in memory

        The following asset categories are provided for GHDL:
        * macOS x64-64 builds as TAR/GZ file
        * macOS aarch64 builds as TAR/GZ file
        * Ubuntu 24.04 LTS builds as TAR/GZ file
        * Windows builds for standalone usage (without MSYS2) as ZIP file
        * MSYS2 packages as TAR/ZST file

        # pyGHDL 5.0.0-dev
        
        The Python package `pyGHDL` offers Python binding (`pyGHDL.libghdl`) to a `libghdl` shared library (`*.so`/`*.dll`).
        In addition to the low-level binding layer, pyGHDL offers:
        * a Language Server Protocol (LSP) instance for e.g. live code checking by editors
        * a Code Document Object Model (CodeDOM) based on [pyVHDLModel](https://github.com/VHDL/pyVHDLModel)

        The following asset categories are provided for pyGHDL:
        * Platform specific Python wheel package for Ubuntu incl. `pyGHDL...so`
        * Platform specific Python wheel package for Windows incl. `pyGHDL...dll`
      assets: |
        document: document1.txt:  Documentation
        document: build.log:      Logfile
        other:    document1.txt:  SBOM
        other:    program.py:     Application
        document:!archive1.zip:    Archive 1 - zip
        document:!archive2.tgz:    Archive 2 - tgz
        document:!archive3.tar.gz: Archive 3 - tar.gz
        document:!archive4.tzst:   Archive 4 - tzst
        document:!archive5.tar.zst:Archive 5 - tar.zst
        document:$archive6.tgz:    Archive 6 - tgz + dir
        document:$archive7.tar.gz: Archive 7 - tar.gz + dir
        document:$archive8.tzst:   Archive 8 - tzst + dir
        document:$archive9.tar.zst:Archive 9 - tar.zst + dir

  TriggerTaggedRelease:
    uses: ./.github/workflows/Tagging.yml
    needs:
      - Build
      - Nightly
#    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
      actions: write
#      attestations: write
    with:
      label: 'Release'
    secrets: inherit

  ReleasePage:
    uses: ./.github/workflows/Release.yml
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - Build
    secrets: inherit
