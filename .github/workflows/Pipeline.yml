name: Pipeline

on:
  push:
  workflow_dispatch:

jobs:
  Build:
    name: Build something
    runs-on: ubuntu-24.04

    steps:
      - name: ðŸ–‰ Build 1
        run: |
          echo "Document 1 $(date --utc '+%d.%m.%Y - %H:%M:%S')"   > document1.txt
          echo "Analysis log $(date --utc '+%d.%m.%Y - %H:%M:%S')" > analysis.log
          echo "Build log $(date --utc '+%d.%m.%Y - %H:%M:%S')"    > build.log

      - name: ðŸ“¤ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: document
          path: |
            document1.txt
            *.log
          if-no-files-found: error
          retention-days: 1

      - name: ðŸ–‰ Program
        run: |
          echo "Document other $(date --utc '+%d.%m.%Y - %H:%M:%S')" > document1.txt
          echo "Program $(date --utc '+%d.%m.%Y - %H:%M:%S')"        > program.py
          
      - name: ðŸ“¤ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: other
          path: |
            *.txt
            *.py
          if-no-files-found: error
          retention-days: 1

  NightlyPage:
    uses: ./.github/workflows/Nightly.yml
    needs:
      - Build
    secrets: inherit
    permissions:
      contents: write
      actions: write
#      attestations: write
    with:
      prerelease: true
      nightly_title: "NÃ¤chtliches Release"
      nightly_description: |
        This *nightly* release contains all latest and important artifacts created by GHDL's CI pipeline.

        # GHDL 5.0.0-dev

        GHDL offers the simulator and synthesis tool for VHDL. GHDL can be build for various backends:
        * `gcc` - using the GCC compiler framework
        * `mcode` - in memory code generation
        * `llvm` - using the LLVM compiler framework
        * `llvm-jit` - using the LLVM compiler framework, but in memory

        The following asset categories are provided for GHDL:
        * macOS x64-64 builds as TAR/GZ file
        * macOS aarch64 builds as TAR/GZ file
        * Ubuntu 24.04 LTS builds as TAR/GZ file
        * Windows builds for standalone usage (without MSYS2) as ZIP file
        * MSYS2 packages as TAR/ZST file

        # pyGHDL 5.0.0-dev
        
        The Python package `pyGHDL` offers Python binding (`pyGHDL.libghdl`) to a `libghdl` shared library (`*.so`/`*.dll`).
        In addition to the low-level binding layer, pyGHDL offers:
        * a Language Server Protocol (LSP) instance for e.g. live code checking by editors
        * a Code Document Object Model (CodeDOM) based on [pyVHDLModel](https://github.com/VHDL/pyVHDLModel)

        The following asset categories are provided for pyGHDL:
        * Platform specific Python wheel package for Ubuntu incl. `pyGHDL...so`
        * Platform specific Python wheel package for Windows incl. `pyGHDL...dll`
      assets: |
        document: document1.txt: Documentation
        document: build.log:     Logfile
        other:    document1.txt: SBOM
        other:    program.py:    Application
        document:!all-in-one.zip:Some stuff to read
        other:   !nothing.tgz:   Nothing to relevant

  TriggerTaggedRelease:
    uses: ./.github/workflows/Tagging.yml
    needs:
      - NightlyPage
    secrets: inherit
    permissions:
      contents: write
      actions: write
#      attestations: write
    with:
      label: 'Release'

  ReleasePage:
    uses: ./.github/workflows/Release.yml
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - Build
    secrets: inherit
