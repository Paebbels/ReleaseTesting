# ==================================================================================================================== #
# Authors:                                                                                                             #
#   Patrick Lehmann                                                                                                    #
#   Unai Martinez-Corral                                                                                               #
#                                                                                                                      #
# ==================================================================================================================== #
# Copyright 2020-2024 The pyTooling Authors                                                                            #
#                                                                                                                      #
# Licensed under the Apache License, Version 2.0 (the "License");                                                      #
# you may not use this file except in compliance with the License.                                                     #
# You may obtain a copy of the License at                                                                              #
#                                                                                                                      #
#   http://www.apache.org/licenses/LICENSE-2.0                                                                         #
#                                                                                                                      #
# Unless required by applicable law or agreed to in writing, software                                                  #
# distributed under the License is distributed on an "AS IS" BASIS,                                                    #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                             #
# See the License for the specific language governing permissions and                                                  #
# limitations under the License.                                                                                       #
#                                                                                                                      #
# SPDX-License-Identifier: Apache-2.0                                                                                  #
# ==================================================================================================================== #
name: Nightly

on:
  workflow_call:
    inputs:
      ubuntu_image:
        description: 'Name of the Ubuntu image.'
        required: false
        default: 'ubuntu-24.04'
        type: string
      nightly_name:
        description: 'Name of the nightly release.'
        required: false
        default: 'nightly'
        type: string
      assets:
        description: 'Multi-line string containing artifact:file:title asset descriptions.'
        required: true
        type: string
      release_branch:
        description: 'Name of the branch containing releases.'
        required: false
        default: 'main'
        type: string

jobs:
  Release:
    name: üìù Update 'Nightly Page' on GitHub
    runs-on: ${{ inputs.ubuntu_image }}
    permissions:
      contents: write
      actions: write
      attestations: write

    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v4
        with:
          # The command 'git describe' (used for version) needs the history.
          fetch-depth: 0

      - name: üìë Delete (old) Release Page
        id: deleteReleasePage
        run: |
          ANSI_LIGHT_RED="\e[91m"
          ANSI_LIGHT_GREEN="\e[92m"
          ANSI_NOCOLOR="\e[0m"
          
          export GH_TOKEN=${{ github.token }}
          
          echo -n "Deleting release '${{ inputs.nightly_name }}' ... "
          gh release delete ${{ inputs.nightly_name }} --yes
          if [[ $? -eq 0 ]]; then
            echo -e "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
          else
            echo -e "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
            echo "Couldn't delete release '${{ inputs.nightly_name }}'."
            echo "::error title=APIError::Couldn't delete release '${{ inputs.nightly_name }}'."
            exit 1
          fi

      - name: üìë (Re)create (new) Release Page
        id: createReleasePage
        run: |
          ANSI_LIGHT_RED="\e[91m"
          ANSI_LIGHT_GREEN="\e[92m"
          ANSI_NOCOLOR="\e[0m"
          
          export GH_TOKEN=${{ github.token }}
          
          echo "Creating release '${{ inputs.nightly_name }}' ... "
          gh release create ${{ inputs.nightly_name }} --verify-tag --notes "Testing $(date '+%H:%M:%S %Y-%m-%d')"
          if [[ $? -eq 0 ]]; then
            echo -e "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
          else
            echo -e "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
            echo "Couldn't create release '${{ inputs.nightly_name }}'."
            echo "::error title=APIError::Couldn't create release '${{ inputs.nightly_name }}'."
            exit 1
          fi

          # --notes-file <file>
          # --notes-from-tag

      - name: üì• Download artifacts and upload as assets
        id: uploadAssets
        run: |
          ANSI_LIGHT_RED="\e[91m"
          ANSI_LIGHT_GREEN="\e[92m"
          ANSI_LIGHT_YELLOW="\e[93m"
          ANSI_NOCOLOR="\e[0m"
          
          export GH_TOKEN=${{ github.token }}
          
          declare -A downloadedArtifacts
          declare -A assetFilenames
          while IFS=$'\r\n' read -r AssetLine; do
            if [[ "${AssetLine}" == "" ]]; then
              continue
            fi
          
            artifact="${AssetLine%%:*}"
            remaining="${AssetLine#*:}"
            asset="${remaining%%:*}"
            title="${remaining##*:}"
          
            echo "Publish asset '${asset}' from artifact '${artifact}' with title '${title}'"
            echo -n "  Checked asset for duplicates ... "
            if [[ -n "${assetFilenames[$asset]}" ]]; then
              echo -e "${ANSI_LIGHT_RED}[ERROR]${ANSI_NOCOLOR}"
              echo "::error title=DuplicateAsset::Asset '${asset}' was already uploaded to release '${{ inputs.nightly_name }}'."
              continue
            else
              echo -e "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
              assetFilenames[$asset]=1
            fi
          
            if [[ -n "${downloadedArtifacts[$artifact]}" ]]; then
              echo -e "  downloading '${artifact}' ... ${ANSI_LIGHT_YELLOW}[SKIPPED]${ANSI_NOCOLOR}"
            else
              echo    "  downloading '${artifact}' ... "
              echo -n "    gh run download $GITHUB_RUN_ID --dir \"${artifact}\" --name \"${artifact}\" "
              gh run download $GITHUB_RUN_ID --dir "${artifact}" --name "${artifact}"
              if [[ $? -eq 0 ]]; then
                echo -e "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
              else
                echo -e "${ANSI_LIGHT_RED}[ERROR]${ANSI_NOCOLOR}"
                echo "Couldn't download artifact '${artifact}'."
                echo "::error title=ArtifactNotFound::Couldn't download artifact '${artifact}'."
                continue
              fi
              downloadedArtifacts[$artifact]=1
            fi
          
            echo -n "  checking asset '${artifact}/${asset}' ... "
            if [[ -e "${artifact}/${asset}" ]]; then
              echo -e "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
            else
              echo -e "${ANSI_LIGHT_RED}[ERROR]${ANSI_NOCOLOR}"
              echo "Couldn't find asset '${asset}' in artifact '${artifact}'."
              echo "::error title=FileNotFound::Couldn't find asset '${asset}' in artifact '${artifact}'."
              continue
            fi
        
            echo -n "  uploading asset '${asset}' with title '${title}' ... "
            gh release upload ${{ inputs.nightly_name }} "${artifact}/${asset}#${title}" --clobber
            if [[ $? -eq 0 ]]; then
              echo -e "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
            else
              echo -e "${ANSI_LIGHT_RED}[ERROR]${ANSI_NOCOLOR}"
              echo "Couldn't upload asset '${asset}' to release '${{ inputs.nightly_name }}'."
              echo "::error title=UploadError::Couldn't upload asset '${asset}' to release '${{ inputs.nightly_name }}'."
              continue
            fi
          done <<<"${{ inputs.assets }}"
          
          echo "Inspecting downlaoded artifacts ..."
          tree .
          
      - name: üìë Create Release Page
        id: testing
        run: |
          export GH_TOKEN=${{ github.token }}
          
          echo "github.ref=${{ github.ref }}"
          
          gh pr list --base ${{ inputs.release_branch }} --label Release --state merged --json title
          echo "return code: $?"

          gh pr list --base ${{ inputs.release_branch }} --label Release --state merged --json title --jq '.[0].title'
          echo "return code: $?"
