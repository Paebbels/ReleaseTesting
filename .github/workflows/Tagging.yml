# ==================================================================================================================== #
# Authors:                                                                                                             #
#   Patrick Lehmann                                                                                                    #
#   Unai Martinez-Corral                                                                                               #
#                                                                                                                      #
# ==================================================================================================================== #
# Copyright 2020-2024 The pyTooling Authors                                                                            #
#                                                                                                                      #
# Licensed under the Apache License, Version 2.0 (the "License");                                                      #
# you may not use this file except in compliance with the License.                                                     #
# You may obtain a copy of the License at                                                                              #
#                                                                                                                      #
#   http://www.apache.org/licenses/LICENSE-2.0                                                                         #
#                                                                                                                      #
# Unless required by applicable law or agreed to in writing, software                                                  #
# distributed under the License is distributed on an "AS IS" BASIS,                                                    #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                             #
# See the License for the specific language governing permissions and                                                  #
# limitations under the License.                                                                                       #
#                                                                                                                      #
# SPDX-License-Identifier: Apache-2.0                                                                                  #
# ==================================================================================================================== #
name: Add Release Tag

on:
  workflow_call:
    inputs:
      ubuntu_image:
        description: 'Name of the Ubuntu image.'
        required: false
        default: 'ubuntu-24.04'
        type: string
      release_branch:
        description: 'Name of the branch containing releases.'
        required: false
        default: 'main'
        type: string
      development_branch:
        description: 'Name of the development branch containing features.'
        required: false
        default: ''
        type: string
      tag_pattern:
        description: 'Name of the branch containing releases.'
        required: false
        default: '(v|r)?[0-9]+(\.[0-9]+){0,2}(-(dev|alpha|beta|rc)([0-9]*))?'
        type: string
      auto_tag:
        description: 'Automatically add and push a tag.'
        required: false
        default: true
        type: boolean
      workflow:
        description: 'Workflow to start after adding a tag.'
        required: false
        default: 'Pipeline.yml'
        type: string
      label:
        description: 'Label the pull request must be marked with.'
        required: false
        default: ''
        type: string

    outputs:
      is_release:
        description: ""
        value: ${{ jobs.FindPullRequest.outputs.is_release }}
      version:
        description: ""
        value: ${{ jobs.FindPullRequest.outputs.version }}
      pr_title:
        description: ""
        value: ${{ jobs.FindPullRequest.outputs.pr_title }}
      pr_number:
        description: ""
        value: ${{ jobs.FindPullRequest.outputs.pr_number }}
      pr_mergedby:
        description: ""
        value: ${{ jobs.FindPullRequest.outputs.pr_mergedby }}
      pr_mergedat:
        description: ""
        value: ${{ jobs.FindPullRequest.outputs.pr_mergedat }}

jobs:
  AddTag:
    name: "🏷 Create 'Release Tag' on GitHub"
    runs-on: ${{ inputs.ubuntu_image }}
    if: github.ref == 'refs/heads/${{ inputs.release_branch }}'

    permissions:
      contents: write
      actions: write

    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v4
        with:
          # The command 'git describe' (used for version) needs the history.
          fetch-depth: 0

      - name: 🔁 Find merged PullRequest from second parent of current SHA (${{ github.sha }})
        id: FindPullRequest
        run: |
          set +e

          ANSI_LIGHT_RED="\e[91m"
          ANSI_LIGHT_GREEN="\e[92m"
          ANSI_LIGHT_YELLOW="\e[93m"
          ANSI_NOCOLOR="\e[0m"
          
          export GH_TOKEN=${{ github.token }}
          
          echo -n "commit check: "
          if [[ "${{ github.ref }}" == "refs/heads/${{ inputs.release_branch }}" ]]; then
            if [[ -z "$(git rev-list -1 --merges ${{ github.sha }}~1..${{ github.sha }})" ]]; then
              echo "is_release=false" >> $GITHUB_OUTPUT
              echo -en "${ANSI_LIGHT_YELLOW}normal "
            else
              echo "is_release=true" >> $GITHUB_OUTPUT
              echo -en "${ANSI_LIGHT_GREEN}merge "
            fi
            echo -e "commit${ANSI_NOCOLOR} on '${{ inputs.release_branch }}' branch"
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo -e "${ANSI_LIGHT_RED}other commit${ANSI_NOCOLOR} on '${{ github.ref }}' branch"
          fi
        
          echo -n "Read second parent of current SHA (${{ github.ref }}) ... "
          FATHER_SHA=$(git rev-list -1 ${{ github.ref }}^2)
          if [[ $? -ne 0 || "{FATHER_SHA}" == "" ]]; then
            echo -e "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
            echo "Couldn't read second parent (father) of '${{ github.ref }}^2'."
            echo "::error title=GitCommitHistoryError::Couldn't read second parent (father) of '${{ github.ref }}^2'. -> ${FATHER_SHA}"
            exit 1
          else
            echo -e "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
          fi
          
          echo -n "Search Pull Request to '${{ inputs.release_branch }}' and branch containing SHA ${FATHER_SHA} ... "
          PULL_REQUESTS=$(gh pr list --base "${{ inputs.release_branch }}" --search "${FATHER_SHA}" --state "merged" --json "title,number,mergedBy,mergedAt")
          if [[ $? -ne 0 || "${PULL_REQUESTS}" == "" ]]; then
            echo -e "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
            echo "Couldn't find a merged Pull Request to '${{ inputs.release_branch }}'. -> ${PULL_REQUESTS}"
            echo "::error title=PullRequest::Couldn't find a merged Pull Request to '${{ inputs.release_branch }}'. -> ${PULL_REQUESTS}"
            exit 1
          else
            echo -e "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
          
            PR_TITLE="$(    echo "${PULL_REQUESTS}" | jq --raw-output ".[0].title")"
            PR_NUMBER="$(   echo "${PULL_REQUESTS}" | jq --raw-output ".[0].number")"
            PR_MERGED_BY="$(echo "${PULL_REQUESTS}" | jq --raw-output ".[0].mergedBy.login")"
            PR_MERGED_AT="$(echo "${PULL_REQUESTS}" | jq --raw-output ".[0].mergedAt")"
          
            echo -e "Found Pull Request:"
            echo -e "  Title:    ${PR_TITLE}"
            echo -e "  Number:   ${PR_NUMBER}"
            echo -e "  MergedBy: ${PR_MERGED_BY}"
            echo -e "  MergedAt: ${PR_MERGED_AT} ($(date -d"${PR_MERGED_AT}" '+%d.%m.%Y - %H:%M:%S'))"
          fi
          
          TAG_PATTERN='^${{ inputs.tag_pattern }}$'
          echo -n "Check Pull Request title against regexp '${TAG_PATTERN}' ... "
          if [[ "${PR_TITLE}" =~ $TAG_PATTERN ]]; then
            echo -e "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
            RELEASE_VERSION="${PR_TITLE}"
          else
            echo -e "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
            echo "Pull Request title '${PR_TITLE}' doesn't conform to regexp '${TAG_PATTERN}'."
            echo "::error title=RexExpCheck::Pull Request title '${PR_TITLE}' doesn't conform to regexp '${TAG_PATTERN}'."
            exit 1
          fi
          
          echo -e "Release tag: ${ANSI_LIGHT_GREEN}${RELEASE_VERSION}${ANSI_NOCOLOR}"
          echo "version=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
          echo "pr_title=${PR_TITLE}" >> $GITHUB_OUTPUT
          echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "pr_mergedby=${PR_MERGED_BY}" >> $GITHUB_OUTPUT
          echo "pr_mergedat=${PR_MERGED_AT}" >> $GITHUB_OUTPUT

      - name: 📑 Only if release merge
        if: steps.FindPullRequest.outputs.is_release == 'true'
        run: |
          echo "should be printed"

      - name: 📑 Never if release merge
        if: steps.FindPullRequest.outputs.is_release != 'true'
        run: |
          echo "should be skipped"

      - name: 🏷 Create release tag '${{ steps.FindPullRequest.outputs.version }}'
        id: createReleaseTag
        if: inputs.auto_tag
        run: |
          set +e

          ANSI_LIGHT_RED="\e[91m"
          ANSI_LIGHT_GREEN="\e[92m"
          ANSI_NOCOLOR="\e[0m"
          
          export GH_TOKEN=${{ github.token }}
          
          echo "Token length: ${#GITHUB_TOKEN}"
        
          echo "git config --local user.email \"ReleaseTagging@users.noreply.github.com\""
          git config --local user.email "ReleaseTagging@users.noreply.github.com"
          
          echo "git config --local user.name \"Paebbels/Actions: Release Tagging\""
          git config --local user.name "Paebbels/Actions: Release Tagging"

          echo "git tag \"${{ steps.FindPullRequest.outputs.version }}\""
          git tag "${{ steps.FindPullRequest.outputs.version }}"
        
          echo -n "git push origin \"${{ steps.FindPullRequest.outputs.version }}\" "
          git push origin "${{ steps.FindPullRequest.outputs.version }}"
          if [[ $? -ne 0 ]]; then
            echo -e "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
            echo "Failed to push tag '${{ steps.FindPullRequest.outputs.version }}'."
            echo "::error title=GitPush::Failed to push tag '${{ steps.FindPullRequest.outputs.version }}'."
            exit 1
          else
            echo -e "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
          fi

#          echo -n "Trigger workflow '${{ inputs.workflow }}' ..."
#          gh workflow run "${{ inputs.workflow }}" --ref "${{ steps.FindPullRequest.outputs.version }}"
#          if [[ $? -ne 0 ]]; then
#            echo -e "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
#            echo "Failed to trigger workflow '${{ inputs.workflow }}' for tag '${{ steps.FindPullRequest.outputs.version }}'."
#            echo "::error title=WorkflowTrigger::Failed to trigger workflow '${{ inputs.workflow }}' for tag '${{ steps.FindPullRequest.outputs.version }}'."
#            exit 1
#          else
#            echo -e "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
#          fi
